#!/usr/bin/env python3
"""
Script de configuraci√≥n segura para el Asistente Virtual SIMAP
Configura variables de entorno y verificaci√≥n de seguridad
"""

import os
import sys
from pathlib import Path
import configparser
import getpass

def crear_env_file():
    """Crear archivo .env si no existe"""
    env_path = Path('.env')
    
    if env_path.exists():
        print("‚ö†Ô∏è  El archivo .env ya existe.")
        respuesta = input("¬øDeseas sobrescribirlo? (s/N): ").lower()
        if respuesta != 's':
            print("‚ùå Operaci√≥n cancelada.")
            return False
    
    print("\nüîß Configurando variables de entorno...")
    
    # Solicitar API Key de OpenAI
    print("\nüìù Configuraci√≥n de OpenAI:")
    openai_key = getpass.getpass("Ingresa tu API Key de OpenAI (sk-...): ")
    
    if not openai_key.startswith('sk-'):
        print("‚ùå La API Key de OpenAI debe comenzar con 'sk-'")
        return False
    
    # Configuraci√≥n de base de datos
    print("\nüíæ Configuraci√≥n de base de datos:")
    print("1. SQLite (recomendado para desarrollo)")
    print("2. MySQL (para producci√≥n)")
    db_choice = input("Selecciona tipo de BD (1/2): ").strip()
    
    # Crear contenido del .env
    env_content = f"""# Archivo .env - Configuraci√≥n del Asistente Virtual SIMAP

# OpenAI API Key (OBLIGATORIA)
OPENAI_API_KEY={openai_key}

# Configuraci√≥n de la aplicaci√≥n
OPENAI_MODEL=gpt-4o-mini
ENVIRONMENT=development

# Configuraci√≥n de Qdrant (Base de datos vectorial)
QDRANT_URL=http://localhost:6333
COLLECTION_NAME=fragment_store
NOMBRE_BDV=fragment_store
MAX_RESULTS=5

# Configuraci√≥n de usuario (valores fijos)
ID_USUARIO=321
UGEL_ORIGEN=Formosa

"""
    
    if db_choice == "2":
        # Configuraci√≥n MySQL
        print("\nüóÑÔ∏è  Configuraci√≥n MySQL:")
        db_host = input("Host de MySQL (localhost): ").strip() or "localhost"
        db_port = input("Puerto de MySQL (3306): ").strip() or "3306"
        db_name = input("Nombre de base de datos (avsp): ").strip() or "avsp"
        db_user = input("Usuario de MySQL (root): ").strip() or "root"
        db_pass = getpass.getpass("Password de MySQL: ")
        
        env_content += f"""# Configuraci√≥n de Base de Datos MySQL
DB_TYPE=mysql
BD_SERVER={db_host}
BD_PORT={db_port}
BD_NAME={db_name}
BD_USER={db_user}
BD_PASSWD={db_pass}
"""
    else:
        # Configuraci√≥n SQLite (por defecto)
        env_content += """# Configuraci√≥n de Base de Datos SQLite
DB_TYPE=sqlite
SQLITE_PATH=BD_RELA/local_database.db
"""
    
    # Escribir archivo .env
    with open(env_path, 'w', encoding='utf-8') as f:
        f.write(env_content)
    
    # Configurar permisos restrictivos
    os.chmod(env_path, 0o600)
    
    print(f"‚úÖ Archivo .env creado exitosamente con permisos restrictivos")
    return True

def limpiar_config_ini():
    """Limpiar API keys del config.ini"""
    config_path = Path('config.ini')
    
    if not config_path.exists():
        print("‚úÖ config.ini no existe, no hay nada que limpiar")
        return True
    
    print("\nüßπ Limpiando config.ini...")
    
    config = configparser.ConfigParser()
    try:
        config.read(config_path)
        
        # Limpiar API keys
        if 'DEFAULT' in config:
            if 'openai_api_key' in config['DEFAULT']:
                if config['DEFAULT']['openai_api_key'].startswith('sk-'):
                    config['DEFAULT']['openai_api_key'] = 'tu-clave-openai-aqui'
                    print("üîß openai_api_key limpiada en config.ini")
            
            if 'tavily_api_key' in config['DEFAULT']:
                if config['DEFAULT']['tavily_api_key'].startswith('tvly-'):
                    config['DEFAULT']['tavily_api_key'] = 'tu-clave-tavily-aqui'
                    print("üîß tavily_api_key limpiada en config.ini")
        
        # Escribir config.ini limpio
        with open(config_path, 'w', encoding='utf-8') as f:
            config.write(f)
        
        print("‚úÖ config.ini limpiado exitosamente")
        return True
        
    except Exception as e:
        print(f"‚ùå Error al limpiar config.ini: {e}")
        return False

def verificar_seguridad():
    """Verificar que no hay API keys expuestas"""
    print("\nüîç Verificando seguridad...")
    
    problemas = []
    
    # Verificar config.ini
    config_path = Path('config.ini')
    if config_path.exists():
        with open(config_path, 'r', encoding='utf-8') as f:
            content = f.read()
            if 'sk-' in content:
                problemas.append("config.ini contiene API keys de OpenAI")
            if 'tvly-' in content:
                problemas.append("config.ini contiene API keys de Tavily")
    
    # Verificar archivos .env.backup o similares
    for backup_file in Path('.').glob('*.backup'):
        if backup_file.exists():
            problemas.append(f"Archivo backup encontrado: {backup_file}")
    
    # Verificar logs en root
    for log_file in Path('.').glob('*.log'):
        if log_file.exists():
            problemas.append(f"Archivo de log en root: {log_file}")
    
    if problemas:
        print("‚ö†Ô∏è  Problemas de seguridad encontrados:")
        for problema in problemas:
            print(f"   - {problema}")
        return False
    else:
        print("‚úÖ No se encontraron problemas de seguridad")
        return True

def crear_directorio_logs():
    """Crear directorio de logs si no existe"""
    logs_dir = Path('logs')
    if not logs_dir.exists():
        logs_dir.mkdir()
        print(f"‚úÖ Directorio logs/ creado")
    else:
        print(f"‚úÖ Directorio logs/ ya existe")

def main():
    """Funci√≥n principal"""
    print("üöÄ Configuraci√≥n Segura del Asistente Virtual SIMAP\n")
    
    # Verificar que estamos en el directorio correcto
    if not Path('app').exists() or not Path('config.ini').exists():
        print("‚ùå Este script debe ejecutarse desde la ra√≠z del proyecto")
        sys.exit(1)
    
    # Crear directorio de logs
    crear_directorio_logs()
    
    # Limpiar config.ini
    if not limpiar_config_ini():
        print("‚ùå Error al limpiar config.ini")
        sys.exit(1)
    
    # Crear archivo .env
    if not crear_env_file():
        print("‚ùå Error al crear archivo .env")
        sys.exit(1)
    
    # Verificar seguridad
    if not verificar_seguridad():
        print("\n‚ö†Ô∏è  Se encontraron problemas de seguridad. Revisa antes de hacer commit.")
    
    print("\nüéâ Configuraci√≥n completada!")
    print("\nüìã Pr√≥ximos pasos:")
    print("1. Revisa el archivo .env creado")
    print("2. Aseg√∫rate de que .env est√° en .gitignore")
    print("3. NUNCA hagas commit de archivos con API keys reales")
    print("4. Usa 'git status' para verificar qu√© archivos se incluir√°n en el commit")

if __name__ == "__main__":
    main() 