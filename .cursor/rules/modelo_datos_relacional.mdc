---
description: 
globs: 
alwaysApply: true
---
# üìò Modelo de Datos del Asistente Virtual - Reglas de Proyecto

Este documento describe las tablas principales del sistema, su funci√≥n y los campos asociados. Est√° dise√±ado para orientar el desarrollo, mantenimiento y monitoreo del asistente virtual con GenAI en producci√≥n.

---

## üóÇÔ∏è Tabla: `usuarios`

**Funci√≥n:**  
Registra los agentes humanos que utilizan el asistente virtual. Se usa para asociar cada consulta con el usuario que la realiz√≥.

**Campos:**
- `id_usuario`: ID √∫nico del usuario (clave primaria).
- `nombre`: Nombre del agente.
- `ugl_origen`: Unidad de Gesti√≥n Local (zona de trabajo).

---

## üóÇÔ∏è Tabla: `prompts`

**Funci√≥n:**  
Administra los prompts del asistente virtual, con control de versiones y activaci√≥n. Permite que un administrador pruebe un prompt antes de activarlo globalmente.

**Campos:**
- `id_prompt`: ID √∫nico del prompt.
- `nombre_prompt`: Nombre descriptivo del prompt.
- `contenido_prompt`: Texto del prompt.
- `version`: N√∫mero de versi√≥n.
- `activo`: Si es el prompt actualmente en uso (booleano).
- `fecha_creacion`: Fecha de creaci√≥n o modificaci√≥n.

---

## üóÇÔ∏è Tabla: `consultas`

**Funci√≥n:**  
Registra cada interacci√≥n entre un usuario y el asistente virtual. Incluye la pregunta, la respuesta, datos t√©cnicos, posibles errores y calidad de la respuesta.

**Campos:**
- `id_consulta`: ID √∫nico de la consulta.
- `timestamp`: Fecha y hora de la consulta.
- `id_usuario`: Relaci√≥n con la tabla `usuarios`.
- `ugel_origen`: Zona del usuario que hizo la consulta.
- `pregunta_usuario`: Texto ingresado por el agente.
- `respuesta_asistente`: Respuesta generada por el asistente.
- `respuesta_es_vacia`: Si la respuesta fue del tipo "no tengo informaci√≥n".
- `respuesta_util`: Si el usuario consider√≥ √∫til la respuesta.
- `id_prompt_usado`: ID del prompt usado en esa interacci√≥n.
- `tokens_input`: Tokens enviados al modelo.
- `tokens_output`: Tokens devueltos por el modelo.
- `tiempo_respuesta_ms`: Tiempo que tard√≥ la respuesta.
- `error_detectado`: Si hubo un error t√©cnico en la ejecuci√≥n.
- `tipo_error`: Tipo de error detectado (si existi√≥).
- `mensaje_error`: Detalles del error t√©cnico.
- `origen_canal`: Canal desde el que se origin√≥ la consulta (web, intranet, etc.).
- `modelo_llm_usado`: Modelo LLM utilizado (ej: GPT-4, Mistral).

---

## üóÇÔ∏è Tabla: `feedback_respuesta` *(opcional)*

**Funci√≥n:**  
Registra comentarios detallados o calificaciones sobre la respuesta. √ötil si se requiere m√°s que un simple ‚Äú√∫til/no √∫til‚Äù.

**Campos:**
- `id_feedback`: ID del feedback.
- `id_consulta`: Relaci√≥n con `consultas`.
- `id_usuario`: Usuario que hizo el feedback.
- `utilidad_respuesta`: Enum con √∫til / no √∫til / neutral.
- `comentario`: Comentario libre.
- `fecha`: Timestamp del feedback.

---

## üóÇÔ∏è Tabla: `log_batch_bdv`

**Funci√≥n:**  
Controla la ejecuci√≥n de procesos batch que actualizan la base vectorial (bdv). Indica si se gener√≥ el JSON, si la carga fue exitosa y si la bdv qued√≥ consistente.

**Campos:**
- `id_batch`: ID del batch.
- `fecha_ejecucion`: Fecha del proceso.
- `json_generado`: Si se gener√≥ el archivo con embeddings.
- `carga_exitosa`: Si se carg√≥ exitosamente a la bdv.
- `estado_bdv`: Estado final de la bdv tras la carga.
- `mensaje_log`: Detalles de la ejecuci√≥n o errores.

---

## üóÇÔ∏è Tabla: `log_arranque_app`

**Funci√≥n:**  
Registra cada vez que se inicia la aplicaci√≥n backend (FastAPI), e indica si las dependencias cr√≠ticas est√°n funcionando (bdv y base relacional).

**Campos:**
- `id_arranque`: ID del arranque.
- `timestamp`: Fecha y hora del inicio.
- `bd_vectorial_ok`: Si la bdv estaba conectada correctamente.
- `bd_relacional_ok`: Si la base de m√©tricas estaba disponible.
- `mensaje_error`: Detalles si hubo fallos durante el arranque.


